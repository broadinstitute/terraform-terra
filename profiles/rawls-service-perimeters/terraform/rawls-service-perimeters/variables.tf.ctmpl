provider "google-beta" {
  credentials = "${file("default.sa.json")}"
  project = "{{env "GOOGLE_PROJECT"}}"
  region = "us-central1"
}

variable "vault_path_prefix" {
  default = "{{env "VAULT_PATH_PREFIX"}}"
  description = "The prefix path at which to store vault values"
}


variable "org_domain" {
  type    = string
  description = "GCP organization domain name to contain this perimeter and folder"
  default = "{{env "ORGANIZATION_DOMAIN"}}"
}

variable "access_policy_name" {
  type    = string
  description = "Resource name of existing access context manager policy to create perimeters within"
  default = "{{env "ACCESS_POLICY_NAME"}}"
}

locals {
  terraform_sa = jsondecode(file("default.sa.json")).client_email
}

{{ define "toJSONStringArray" }}[{{range $i, $v := .}}{{if $i}}, {{end}}{{printf "%q" $v}}{{end}}]{{ end }}

{{ with $profile_json := file "/env.json" | parseJSON }}
{{ $perimeters := index $profile_json "profile_vars" "rawls-service-perimeters" "extras" "perimeters" }}

variable "perimeters" {
  type    = map(object({
    restricted_services = list(string)
    access_member_whitelist = list(string)
    has_ingress_bridge = bool
    sam_resource_owner_email = string
  }))
  default = {
    {{ range $k, $v := $perimeters }}
    "{{ $k }}" = {
      restricted_services = {{ template "toJSONStringArray" $v.restricted_services }}
      access_member_whitelist = {{ template "toJSONStringArray" $v.access_member_whitelist }}
      has_ingress_bridge = {{ if $v.ingress_bridge }} true {{ else }} false {{ end }}
      sam_resource_owner_email = "{{ $v.sam_resource_owner_email }}"
    }
    {{ end }}
  }
}

# Sparse map of perimeter folder admins. Only contains entries for perimeters
# which specify a list of admins.
variable "folder_admins" {
  type    = map(object({
    members = list(string)
  }))
  default = {
    {{ range $k, $v := $perimeters }}{{ if $v.folder_admins }}
    "{{ $k }}" = {
      members = {{ template "toJSONStringArray" $v.folder_admins }}
    }
    {{ end }}{{ end }}
  }
}

# Sparse map of perimeter audit log project IDs. Only contains entries if a sink
# destination has been specified.
variable "audit_logs_project_ids" {
  type    = map(string)
  default = {
    {{ range $k, $v := $perimeters }}{{ if $v.audit_logs_project_id }}
    "{{ $k }}" = "{{ $v.audit_logs_project_id }}"
    {{ end }}{{ end }}
  }
}

# Sparse map of ingress bridge configurations. Only contains entries for
# perimeters which define ingress bridges.
variable "ingress_bridges" {
  type    = map(object({
    ingress_project_id = string
    protected_project_id = string
  }))
  default = {
    {{ range $k, $v := $perimeters }}{{ if $v.ingress_bridge }}
    "{{ $k }}" = {
      ingress_project_id = "{{ $v.ingress_bridge.ingress_project_id }}"
      protected_project_id = "{{ $v.ingress_bridge.protected_project_id }}"
    }
    {{ end }}{{ end }}
  }
}

# Sparse map of perimeter egress alerts configs, including sumologic alert folder name, webhook id and source category name.
variable "vpc_flow_egress_alerts" {
   type    = map(object({
     aou_env = string
     sumologic_parent_folder_id_hexadecimal = string
     sumologic_webhook_id_hexadecimal = string
     sumologic_source_category_name = string
   }))
  default = {
    {{ range $k, $v := $perimeters }}{{ if $v.vpc_flow_egress_alerts }}
    "{{ $k }}" = {
      aou_env = "{{ $v.vpc_flow_egress_alerts.aou_env }}"
      sumologic_parent_folder_id_hexadecimal = "{{ $v.vpc_flow_egress_alerts.sumologic_parent_folder_id_hexadecimal }}"
      sumologic_webhook_id_hexadecimal = "{{ $v.vpc_flow_egress_alerts.sumologic_webhook_id_hexadecimal }}"
      sumologic_source_category_name = "{{ $v.vpc_flow_egress_alerts.sumologic_source_category_name }}"
    }
    {{ end }}{{ end }}
  }
}
{{end}}

variable "terra_environment" {
  type    = string
  default = "{{env "TERRA_ENVIRONMENT"}}"
  description = "The environment specified in the application json. E.g. 'dev' "
}
